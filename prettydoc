#!/usr/bin/env lua.exe

debugging = false

tagstack = {}

local HTML = {}
HTML.__index = HTML

function HTML:new(filename)
  local file, err = io.open(filename .. ".html", "w")
  if not file then
    die("Couldn't open %s.html: %s\n", filename, err)
  end
  local o = {
    name = filename,
    file = file,
    depth = 0,
    tagstack = {},
    lines = {}
  }
  setmetatable(o, self)
  return o
end

function HTML:close()
  self:flush()
  io.close(self.file)
  self.file = nil
end

function HTML:flush()
  if not self.file then
    die("Trying to flush %s, but no file?", self.name or "--nameless--")
  end
  for _, line in ipairs(self.lines) do
    self.file:write(line)
  end
  self:tag_pop(0)
end

function HTML:clean(value)
  if type(value) ~= 'string' then
    value = tostring(value)
  end
  value = value:gsub('&', '&amp;')
  value = value:gsub('<', '&lt;')
  value = value:gsub('>', '&gt;')
  value = value:gsub("\n", '<br/>')
  return value
end


function HTML:raw(fmt, ...)
  local out = string.format(fmt, ...)
  local line = ""
  for i = 1, self.depth do
    line = line .. "  "
  end
  line = line .. out .. "\n"
  table.insert(self.lines, line)
end

function HTML:html(fmt, ...)
  local cleaned = {}
  for _, value in ipairs(arg) do
    table.insert(cleaned, self:clean(value))
  end
  self:raw(fmt, unpack(cleaned))
end

function HTML:debug(fmt, ...)
  if debugging then
    self:html(fmt, ...)
  end
end

function HTML:tag_push(name)
  table.insert(self.tagstack, name)
  self:html("<%s>", name)
  self.depth = self.depth + 1
end

function do_copy(table, visited)
  local o = {}
  for k, v in pairs(table) do
    if type(v) == 'table' then
      if not visited[v] then
        visited[v] = true
        o[k] = do_copy(v, visited)
        visited[v] = o[k]
      else
        o[k] = visited[v]
      end
    else
      o[k] = v
    end
  end
  return o
end

function deep_copy(table)
  local visited = {}
  return do_copy(table, visited)
end

function HTML:pretty_sig(sigs_orig, params, results)
  local arg_types = {}
  local arg_descriptions = {}
  local sorted_params = nil
  local sorted_results = nil
  local interaction, throttled, hardware, secure, insecure
  local sigs = deep_copy(sigs_orig)

  for key, value in pairs(sigs) do
    self:debug('<p><i>%s</i>: %s</p>', key, value)
  end
  if params then
    sorted_params = {}
    for key, value in pairs(params) do
      self:debug('<p>param <i>%s</i>: %s</p>', key, value)
    end
    for name, value in pairs(params) do
      arg_descriptions[name] = value
      table.insert(sorted_params, name)
    end
    table.sort(sorted_params)
  end
  if results then
    sorted_results = {}
    for key, value in pairs(results) do
      self:debug('<p>result <i>%s</i>: %s</p>', key, value)
    end
    for name, value in pairs(results) do
      arg_descriptions[name] = value
      table.insert(sorted_results, name)
    end
    table.sort(sorted_results)
  end

  if sigs.interaction then
    interaction = sigs.interaction
    sigs.interaction = nil
  else
    interaction = false
  end
  if sigs.hardwareevent then
    hardware = true
    sigs.hardwareevent = nil
  else
    hardwareevent = false
  end
  if sigs.throttled then
    throttled = sigs.throttled
    sigs.throttled = nil
  else
    throttled = false
  end
  if sigs.noSecureFrameAndEnvironment then
    sigs.noSecureFrameAndEnvironment = nil
    insecure = true
  end
  if sigs.requireSecureFrameAndInsecureEnvironment then
    sigs.requireSecureFrameAndInsecureEnvironment = nil
    secure = true
  end
  for k, v in pairs(sigs) do
    if type(k) ~= 'number' then
      print("Unknown sig field: " .. tostring(k))
      self:html('<h4>unknown sig field %s: %s</h4>',
        k, v)
    end
  end
  self:html('<h3>Usage: %s %s %s</h3>',
  	hardwareevent and '(Requires Hardware Event)' or '',
  	secure and '(Requires Secure Frame)' or '',
  	insecure and '(Does Not Require Secure Frame)' or '')
  if interaction then
    self:html('<p>Interaction category: %s</p>', interaction)
  end
  if throttled then
    self:html('<p>Throttled.</p>')
  end
  self:tag_push('table')
  signatures_seen = {}
  for _, value in ipairs(sigs) do
    if string.match(value, '.*=.*') then
      retname, name, args, types = string.match(value, '([^=]+[^%s])%s*=%s*([^%(]+)%(([^%)]*)%)%s*%-%-%s*(.*)')
      rettype, argtypes = string.match(types, '([^<]+[^%s])%s*<%-%s*(.*)')
      if string.find(retname, '%s') then
        broken_out_rets = split(retname, ',%s*')
	broken_out_rettypes = split(rettype, ',%s*')
	for idx, arg in ipairs(broken_out_rets) do
	  arg_types[arg] = arg_types[arg] or {}
	  arg_types[arg][broken_out_rettypes[idx] or '<nope>'] = true
	end
      else
	arg_types[retname] = arg_types[retname] or {}
	arg_types[retname][rettype] = true
      end
    else
      name, args, argtypes = string.match(value, '%s*([^%(]+)%(([^%)]*)%)%s*%-%-%s*(.*)')
      retname = nil
    end
    if argtypes and args ~= '' then
      broken_out_args = split(args, ',%s*')
      broken_out_argtypes = split(argtypes, ',%s*')
      replacement_args = ''
      for idx, arg in ipairs(broken_out_args) do
	arg_types[arg] = arg_types[arg] or {}
	arg_types[arg][broken_out_argtypes[idx] or '<nope>'] = true
	if replacement_args == '' then
	  replacement_args = string.format("<i>%s</i>", self:clean(arg))
	else
	  replacement_args = replacement_args .. string.format(", <i>%s</i>", self:clean(arg))
	end
      end
      self:debug("<tr><td colspan=4>replacement_args: %s</td></tr>", replacement_args)
    else
      replacement_args = args
    end
    if argtypes then
      if retname then
	signature = string.format('<i>%s</i> = %s(%s)',
	  self:clean(retname), self:clean(name), replacement_args)
      else
	signature = string.format('%s(%s)',
	  self:clean(name), replacement_args)
      end
      if not signatures_seen[signature] then
	self:raw('<tr><td colspan=4>%s</td></tr>', signature)
	signatures_seen[signature] = true
      end
    else
      die("Couldn't parse sig: %s\n", value)
    end
  end
  sorted_types = {}
  for name, _ in pairs(arg_types) do
    -- if this isn't in either results or params, we should use it
    if not (params and params[name]) then
      if not (results and results[name]) then
        table.insert(sorted_types, name)
      end
    end
  end
  table.sort(sorted_types)
  if sorted_types[1] or sorted_params or sorted_results then
    self:html('<tr><th>Parameter</th><th>Type</th><th>Datatype</th><th>Description</th></tr>')
  end
  pretty_types = {}
  for name, value in pairs(arg_types) do
    type_list = {}
    for key, _ in pairs(value) do
      table.insert(type_list, key)
    end
    pretty_types[name] = table.concat(type_list, ", ")
  end
  for _, name in ipairs(sorted_types) do
    self:html('<tr><td><i>%s</i></td><td>???</td><td><i>%s</i></td><td>%s</td></tr>',
      name, pretty_types[name], arg_descriptions[name] or '')
  end
  if sorted_params then
    for _, name in ipairs(sorted_params) do
      self:html('<tr><td><i>%s</i></td><td>parameter</td><td><i>%s</i></td><td>%s</td></tr>',
        name, pretty_types[name], arg_descriptions[name] or '')
    end
  end
  if sorted_results then
    for _, name in ipairs(sorted_results) do
      self:html('<tr><td><i>%s</i></td><td>result</td><td><i>%s</i></td><td>%s</td></tr>',
        name, pretty_types[name], arg_descriptions[name] or '')
    end
  end
  self:tag_pop()
end

function HTML:pretty_value(name, value)
  self:tag_push('tr')
  self:html('<th>%s</th>', name)
  if type(value) == 'table' then
    self:tag_push('td')
    self:pretty_table(value)
    self:tag_pop()
  else
    self:html('<td>%s</th>', tostring(value))
  end
  self:tag_pop()
end

function HTML:pretty_table(data)
  self:tag_push('table')
  local sorted = {}
  for name, _ in pairs(data) do
    if type(name) ~= 'number' then
      table.insert(sorted, name)
    end
  end
  table.sort(sorted)
  for idx, value in ipairs(data) do
    self:pretty_value(string.format('[%d]', idx), value)
  end
  for _, name in ipairs(sorted) do
    value = data[name]
    self:pretty_value(name, value)
  end
  self:tag_pop()
end

function HTML:tag_pop(new_depth)
  if not new_depth then
    new_depth = self.depth - 1
    if new_depth < 0 then
      new_depth = 0
    end
  end
  while new_depth < self.depth do
    tag = self.tagstack[#(self.tagstack)]
    table.remove(self.tagstack, #(self.tagstack))
    self.depth = self.depth - 1
    self:html("</%s>", tag)
  end
end

function printf(fmt, ...)
  local out = string.format(fmt, ...)
  io.write(out)
end

function die(fmt, ...)
  printf('Fatal: ' .. fmt, ...)
  printt(debug.traceback())
  os.exit(1)
end

if #(arg) ~= 2 then
  die("Usage: prettydoc <name> <directory>\n")
end

realmtype = arg[1]
dir = arg[2]
fullname = dir .. "/../Saved/SavedVariables/DocExport.lua"

file, err = io.open(fullname)

if not file then
  die("Couldn't open DocExport.lua: %s\n", err)
end

io.close(file)

dofile(fullname)

if not DocExport then
  die("Parse failed or didn't yield a variable named DocExport.")
end

sorted = {}

for name, _ in pairs(DocExport) do
  table.insert(sorted, name)
end

table.sort(sorted)

singlefile = HTML:new(realmtype .. "/full")
indexfile = HTML:new(realmtype .. "/index")

function HTML:header(objectname)
  self:tag_push('html')
  if objectname then
    self:html("<head><title>API Docs (%s) -- %s</title></head>", realmtype, objectname)
  else
    self:html("<head><title>API Docs (%s)</title></head>", realmtype)
  end
  self:tag_push('body')
  self:tag_push('style')
  self:html("table { border-style: solid; border-collapse: collapse; }")
  self:html("th { border-bottom-style: solid; padding: 3pt; text-align: left; vertical-align: top; }")
  self:html("td { border-bottom-style: solid; padding: 3pt; text-align: left; vertical-align: top; }")
  self:tag_pop()
end

singlefile:header()
indexfile:header()

function split(s, pattern)
  splits = {}
  while string.find(s, pattern) do
    from, to = string.find(s, pattern)
    word = string.sub(s, 1, from - 1)
    s = string.sub(s, to + 1)
    table.insert(splits, word)
  end
  table.insert(splits, s)
  return splits
end

summary_index = {}
type_index = {}
hardware_index = {}
deprecated_index = {}
req_secure_index = {}
no_secure_index = {}
smashed_index = {}
-- *.TYPE.*, e.g., *.Item.*
typesmash_index = {}
typesmash_known = {}

typesmash_rules = {
  { pattern = '^(UI)%.(Native)%.(.*)$', index = 2 },
  { pattern = '^(UI)%.(.*)$', index = 1 },
  { pattern = '^([a-z][^.]*)$', index = 1, word = 'Miscellaneous' },
  { pattern = '^([A-Z]%a+)$', index = 1 },
  { pattern = '^(%a+):(.*)$', index = 1 },
  { pattern = '^(%a+)%.(%a+)$', index = 2 },
  { pattern = '^(%a+)%.(Event):(.*)$', index = 1 },
  { pattern = '^(%a+)%.(%a+)%.(.*)$', index = 2 },
}

-- pass 1:  collect data
for _, name in ipairs(sorted) do
  local details = DocExport[name]
  local dtype = type(details)
  local smashed = nil
  for _, rule in ipairs(typesmash_rules) do
    local results = { string.match(name, rule.pattern) }
    smashed = results[rule.index]
    if smashed and smashed ~= '' then
      typesmash_known[rule.word or smashed] = true
      typesmash_index[name] = rule.word or smashed
      break
    end
  end
  if not smashed then
    typesmash_known['UNMATCHED'] = true
    typesmash_index[name] = 'UNMATCHED'
  end
  smashed_index[name] = string.lower(string.gsub(name, '[./:]', '_'))
  if dtype == 'table' then
    if details.type then
      my_type = details.type
      type_index[name] = details.type
      details.type = nil
    else
      my_type = ''
    end
    if details.summary then
      if my_type ~= '' then
        display_type = string.format('%s:', my_type)
      else
        display_type = ''
      end
      summary_index[name] = details.summary
      details.summary = nil
    end
    if details.deprecated then
      deprecated_index[name] = true
    end
    if details.signatures then
      if details.signatures.hardwareevent then
        hardware_index[name] = true
      end
      if details.signatures.noSecureFrameAndEnvironment then
        no_secure_index[name] = true
      end
      if details.signatures.requireSecureFrameAndInsecureEnvironment then
        req_secure_index[name] = true
      end
      if no_secure_index[name] and req_secure_index[name] then
        print("Both secure and insecure: " .. name)
      end
    end
    details['name'] = nil
    details['readable'] = nil
    details['order'] = nil
  end
end

typesmash_sorted = {}
typesmash_files = {}

for typesmash, _ in pairs(typesmash_known) do
  table.insert(typesmash_sorted, typesmash)
  local newfile = HTML:new(realmtype .. "/" .. typesmash .. '_index')
  newfile:header()
  newfile:html("<h4><a href='index.html'>Back to index...</a></h4>")
  newfile:tag_push('table')
  newfile:html("<tr><th>Name</th><th>Type</th><th>Deprecated</th><th>Secure</th><th>Description</th></tr>")
  typesmash_files[typesmash] = newfile
end
table.sort(typesmash_sorted)

-- pass 2:  Display index.

singlefile:html("<h1>INDEX (<a href='index.html'>Broken-down Listing</a>)</h1>")
singlefile:tag_push('table')
singlefile:html("<tr><th>Name</th><th>Type</th><th>Deprecated</th><th>Secure</th><th>Description</th></tr>")

indexfile:html("<h1>INDEX (<a href='full.html'>Full Listing</a>)</h1>")
indexfile:html("<h2>Categories:</h2>")
indexfile:tag_push('table')
indexfile:tag_push('tr')
local rowcounter = 0
for _, typesmash in ipairs(typesmash_sorted) do
  if rowcounter == 0 then
    indexfile:tag_push('tr')
  end
  indexfile:html("<th><a href='%s_index.html'>%s</a></th>", typesmash, typesmash)
  rowcounter = rowcounter + 1
  if rowcounter >= 4 then
    indexfile:tag_pop()
    rowcounter = 0
  end
end
indexfile:tag_pop()
indexfile:tag_push('table')
indexfile:html("<tr><th>Name</th><th>Type</th><th>Deprecated</th><th>Secure</th><th>Description</th></tr>")

for _, name in ipairs(sorted) do
  if type_index[name] or summary_index[name] then
    summary = summary_index[name] or ''
    if #summary > 100 then
      summary = string.sub(summary, 1, 97) .. '...'
    end
    singlefile:html('<tr><td><a href="#%s">%s</a></td><td><i>%s</i></td><td><i>%s</i></td><td>%s%s</td><td>%s</td></tr>',
      name,
      name,
      type_index[name] or '',
      deprecated_index[name] and 'deprecated' or '',
      req_secure_index[name] and 'Secure' or '',
      no_secure_index[name] and 'Insecure' or '',
      summary)
    if typesmash_index[name] then
      typesmash_files[typesmash_index[name]]:html('<tr><td><a href="#%s">%s</a></td><td><i>%s</i></td><td><i>%s</i></td><td>%s%s</td><td>%s</td></tr>',
        name,
        name,
        type_index[name] or '',
        deprecated_index[name] and 'deprecated' or '',
        req_secure_index[name] and 'Secure' or '',
        no_secure_index[name] and 'Insecure' or '',
        summary)
    end
    indexfile:html('<tr><td><a href="%s.html">%s</a></td><td><i>%s</i></td><td><i>%s</i></td><td>%s%s</td><td>%s</td></tr>',
      smashed_index[name],
      name,
      type_index[name] or '',
      deprecated_index[name] and 'deprecated' or '',
      req_secure_index[name] and 'Secure' or '',
      no_secure_index[name] and 'Insecure' or '',
      summary)
  end
end
singlefile:tag_pop()
indexfile:tag_pop()
for name, smashfile in pairs(typesmash_files) do
  smashfile:tag_pop()
end

function HTML:display_table(details_orig)
  local details = deep_copy(details_orig)
  if details.signature then
    sigs = { string.format("%s -- variant", details.signature) }
    params = details.parameter
    results = details.result
    details.signature = nil
    details.parameter = nil
    details.result = nil
    self:pretty_sig(sigs, params, results)
  end
  if details.signatures then
    sigs = details.signatures
    params = details.parameter
    results = details.result
    details.signatures = nil
    details.parameter = nil
    details.result = nil
    self:pretty_sig(sigs, params, results)
  end
  self:tag_push("dl")
  for name, value in pairs(details) do
    self:html("<dt><b>%s</b></dt>", name)
    if type(value) == 'table' then
      self:tag_push('dd')
      self:pretty_table(value)
      self:tag_pop()
    else
      self:html("<dd>%s</dd>", tostring(value))
    end
  end
  self:tag_pop()
end

-- pass 3:  Detailed info
for _, name in ipairs(sorted) do
  local details = DocExport[name]
  local dtype = type(details)
  local onefile = HTML:new(realmtype .. "/" .. smashed_index[name])
  local smashfile
  local is_deprecated
  onefile:header(name)
  is_deprecated = deprecated_index[name] and '(deprecated)' or ''
  singlefile:html('<h2><a name="%s">%s</a> %s</h2>', name, name, is_deprecated)
  onefile:html('<h2><a name="%s">%s</a> %s</h2>', name, name, is_deprecated)
  if typesmash_index[name] then
    smashfile = typesmash_files[typesmash_index[name]]
  end
  if smashfile then
    smashfile:html('<h2><a name="%s">%s</a></h2>', name, name)
  end
  if summary_index[name] then
      singlefile:html("<p><i>%s</i> %s</p>", display_type, summary_index[name])
      onefile:html("<p><i>%s</i> %s</p>", display_type, summary_index[name])
      if smashfile then
        smashfile:html("<p><i>%s</i> %s</p>", display_type, summary_index[name])
      end
  end
  if dtype == 'table' then
    singlefile:display_table(details)
    onefile:display_table(details)
    if smashfile then
      smashfile:display_table(details)
    end
  else
    singlefile:html("<p>(%s) %s</p>", dtype, tostring(details))
    onefile:html("<p>(%s) %s</p>", dtype, tostring(details))
    if smashfile then
      smashfile:html("<p>(%s) %s</p>", dtype, tostring(details))
    end
  end
  onefile:close()
end

for name, smashfile in pairs(typesmash_files) do
  smashfile:html("<h4><a href='index.html'>Back to index...</a></h4>")
  smashfile:close()
end
singlefile:close()
indexfile:close()
